[{"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\index.js":"1","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\App.js":"2","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\reportWebVitals.js":"3","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\components\\Layout.js":"4","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\components\\Register.js":"5","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\components\\Login.js":"6","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useToggle.js":"7","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\api\\axios.js":"8","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useInput.js":"9","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useAuth.js":"10","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useLocalStorage.js":"11","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\context\\AuthProvider.js":"12"},{"size":530,"mtime":1666334585493,"results":"13","hashOfConfig":"14"},{"size":544,"mtime":1666334585481,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1666335299152,"results":"16","hashOfConfig":"17"},{"size":191,"mtime":1666334585483,"results":"18","hashOfConfig":"14"},{"size":8806,"mtime":1666334585485,"results":"19","hashOfConfig":"14"},{"size":3589,"mtime":1666334585484,"results":"20","hashOfConfig":"14"},{"size":363,"mtime":1666334585492,"results":"21","hashOfConfig":"14"},{"size":286,"mtime":1666334585481,"results":"22","hashOfConfig":"14"},{"size":381,"mtime":1666334585489,"results":"23","hashOfConfig":"14"},{"size":317,"mtime":1666334585486,"results":"24","hashOfConfig":"14"},{"size":768,"mtime":1666334585489,"results":"25","hashOfConfig":"14"},{"size":356,"mtime":1666334585486,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oed3g1",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xqg62n",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\index.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\App.js",["66"],[],"import Register from './components/Register';\r\nimport Login from './components/Login';\r\nimport Layout from './components/Layout';\r\nimport { Routes, Route } from 'react-router-dom';\r\n\r\nconst ROLES = {\r\n  'User': 2001,\r\n  'Editor': 1984,\r\n  'Admin': 5150\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Layout />}>\r\n        public routes\r\n        <Route path=\"login\" element={<Login />} />\r\n        <Route path=\"register\" element={<Register />} />\r\n      </Route>\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\reportWebVitals.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\components\\Layout.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\components\\Register.js",["67"],[],"import { useRef, useState, useEffect } from \"react\";\r\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport axios from '../api/axios';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\nconst USER_REGEX = /^[a-z]+[a-z0-9]{5,19}$/g;\r\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\nconst REGISTER_URL = '/register';\r\n\r\nconst Register = () => {\r\n    const userRef = useRef();\r\n    const errRef = useRef();\r\n\r\n    const [user, setUser] = useState('');\r\n    const [validName, setValidName] = useState(false);\r\n    const [userFocus, setUserFocus] = useState(false);\r\n\r\n    const [pwd, setPwd] = useState('');\r\n    const [validPwd, setValidPwd] = useState(false);\r\n    const [pwdFocus, setPwdFocus] = useState(false);\r\n\r\n    const [matchPwd, setMatchPwd] = useState('');\r\n    const [validMatch, setValidMatch] = useState(false);\r\n    const [matchFocus, setMatchFocus] = useState(false);\r\n\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    useEffect(() => {\r\n        userRef.current.focus();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setValidName(USER_REGEX.test(user));\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        setValidPwd(PWD_REGEX.test(pwd));\r\n        setValidMatch(pwd === matchPwd);\r\n    }, [pwd, matchPwd])\r\n\r\n    useEffect(() => {\r\n        setErrMsg('');\r\n    }, [user, pwd, matchPwd])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // if button enabled with JS hack\r\n        // v1 닉네임 유효성 검사\r\n        const v1 = USER_REGEX.test(user);\r\n        // v2 비밀번호 유효성 검사\r\n        const v2 = PWD_REGEX.test(pwd);\r\n        if (!v1 || !v2) {\r\n            setErrMsg(\"Invalid Entry\");\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axios.post(REGISTER_URL,\r\n                JSON.stringify({ user, pwd }),\r\n                {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n            // TODO: remove console.logs before deployment\r\n            console.log(JSON.stringify(response?.data));\r\n            //console.log(JSON.stringify(response))\r\n            setSuccess(true);\r\n            //clear state and controlled inputs\r\n            setUser('');\r\n            setPwd('');\r\n            setMatchPwd('');\r\n        } catch (err) {\r\n            if (!err?.response) {\r\n                setErrMsg('No Server Response');\r\n            } else if (err.response?.status === 409) {\r\n                setErrMsg('Username Taken');\r\n            } else {\r\n                setErrMsg('Registration Failed')\r\n            }\r\n            errRef.current.focus();\r\n        }\r\n    }\r\n// 보여지는 화면\r\n    return (\r\n        <>\r\n        {/* 삼항 연산자 success ? () : () */}\r\n            {success ? (\r\n                <section>\r\n                    <h1>회원가입이 완료되었습니다.</h1>\r\n                    <p>\r\n                        <a href=\"#\">로그인</a>\r\n                    </p>\r\n                </section>\r\n            ) : (\r\n                <section>\r\n                    <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n                    <h1>회원가입</h1>\r\n                    <form onSubmit={handleSubmit}>\r\n                        {/* 아이디 */}\r\n                        <label htmlFor=\"username\">\r\n                            아이디:\r\n                            <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            ref={userRef}\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => setUser(e.target.value)}\r\n                            value={user}\r\n                            required\r\n                            aria-invalid={validName ? \"false\" : \"true\"}\r\n                            aria-describedby=\"uidnote\"\r\n                            onFocus={() => setUserFocus(true)}\r\n                            onBlur={() => setUserFocus(false)}\r\n                        />\r\n                        <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            {/* 4 to 24 characters.<br />\r\n                            Must begin with a letter.<br />\r\n                            Letters, numbers, underscores, hyphens allowed. */}\r\n                            {/* 영문자로 시작하는 영문자 또는 숫자 6~20자  */}\r\n                            6~20 영문자.<br />\r\n                            영문자로 시작해야 합니다.<br />\r\n                            영문자, 숫자를 사용할 수 있습니다.\r\n                        </p>\r\n\r\n                        {/* 비밀번호 */}\r\n                        <label htmlFor=\"password\">\r\n                            비밀번호:\r\n                            <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            onChange={(e) => setPwd(e.target.value)}\r\n                            value={pwd}\r\n                            required\r\n                            aria-invalid={validPwd ? \"false\" : \"true\"}\r\n                            aria-describedby=\"pwdnote\"\r\n                            onFocus={() => setPwdFocus(true)}\r\n                            onBlur={() => setPwdFocus(false)}\r\n                        />\r\n                        <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            {/* 8 to 24 characters.<br />\r\n                            Must include uppercase and lowercase letters, a number and a special character.<br /> */}\r\n                            8 ~ 24 영문자.<br />\r\n                            대문자와 소문자, 숫자 및 특수 문자를 포함해야 합니다.<br />\r\n                            허용되는 특수 문자: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\r\n                        </p>\r\n\r\n                        {/* 비밀번호 일치 확인 */}\r\n                        <label htmlFor=\"confirm_pwd\">\r\n                            비밀번호 재확인:\r\n                            <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\r\n                            <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"confirm_pwd\"\r\n                            onChange={(e) => setMatchPwd(e.target.value)}\r\n                            value={matchPwd}\r\n                            required\r\n                            aria-invalid={validMatch ? \"false\" : \"true\"}\r\n                            aria-describedby=\"confirmnote\"\r\n                            onFocus={() => setMatchFocus(true)}\r\n                            onBlur={() => setMatchFocus(false)}\r\n                        />\r\n                        <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\r\n                            <FontAwesomeIcon icon={faInfoCircle} />\r\n                            비밀번호가 일치하지 않습니다.\r\n                        </p>\r\n\r\n                        <button disabled={!validName || !validPwd || !validMatch ? true : false}>가입하기</button>\r\n                    </form>\r\n                    <p>\r\n                        이미 가입하셨다면?<br />\r\n                        <span className=\"line\">\r\n                            <Link to=\"/\">로그인하기</Link>\r\n                        </span>\r\n                    </p>\r\n                </section>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\components\\Login.js",["68","69"],[],"import { useRef, useState, useEffect } from 'react';\r\nimport useAuth from '../hooks/useAuth';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport useInput from '../hooks/useInput';\r\nimport useToggle from '../hooks/useToggle';\r\n\r\nimport axios from '../api/axios';\r\nconst LOGIN_URL = '/auth';\r\n\r\nconst Login = () => {\r\n    const { setAuth } = useAuth();\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const from = location.state?.from?.pathname || \"/\";\r\n\r\n    const userRef = useRef();\r\n    const errRef = useRef();\r\n\r\n    const [user, resetUser, userAttribs] = useInput('user', '')\r\n    const [pwd, setPwd] = useState('');\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [check, toggleCheck] = useToggle('persist', false);\r\n\r\n    useEffect(() => {\r\n        userRef.current.focus();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setErrMsg('');\r\n    }, [user, pwd])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.post(LOGIN_URL,\r\n                JSON.stringify({ user, pwd }),\r\n                {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n            const accessToken = response?.data?.accessToken;\r\n            const roles = response?.data?.roles;\r\n            setAuth({ user, pwd, roles, accessToken });\r\n            resetUser();\r\n            setPwd('');\r\n            navigate(from, { replace: true });\r\n        } catch (err) {\r\n            if (!err?.response) {\r\n                setErrMsg('No Server Response');\r\n            } else if (err.response?.status === 400) {\r\n                setErrMsg('Missing Username or Password');\r\n            } else if (err.response?.status === 401) {\r\n                setErrMsg('Unauthorized');\r\n            } else {\r\n                setErrMsg('Login Failed');\r\n            }\r\n            errRef.current.focus();\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <section>\r\n            <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n            <h1>로그인</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"username\">아이디:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    ref={userRef}\r\n                    autoComplete=\"off\"\r\n                    {...userAttribs}\r\n                    required\r\n                />\r\n\r\n                <label htmlFor=\"password\">비밀번호:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    onChange={(e) => setPwd(e.target.value)}\r\n                    value={pwd}\r\n                    required\r\n                />\r\n                <button>로그인</button>\r\n                {/* <div className=\"persistCheck\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"persist\"\r\n                        onChange={toggleCheck}\r\n                        checked={check}\r\n                    />\r\n                    <label htmlFor=\"persist\">Trust This Device</label>\r\n                </div> */}\r\n            </form>\r\n            <p>\r\n                아직 회원이 아니신가요?<br />\r\n                <span className=\"line\">\r\n                    <Link to=\"/register\">회원가입하기</Link>\r\n                </span>\r\n            </p>\r\n        </section>\r\n\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useToggle.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\api\\axios.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useInput.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useAuth.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\hooks\\useLocalStorage.js",[],[],"C:\\Program Files\\find_my_lover\\src\\main\\reactjs\\src\\context\\AuthProvider.js",[],[],{"ruleId":"70","severity":1,"message":"71","line":6,"column":7,"nodeType":"72","messageId":"73","endLine":6,"endColumn":12},{"ruleId":"74","severity":1,"message":"75","line":94,"column":25,"nodeType":"76","endLine":94,"endColumn":37},{"ruleId":"70","severity":1,"message":"77","line":23,"column":12,"nodeType":"72","messageId":"73","endLine":23,"endColumn":17},{"ruleId":"70","severity":1,"message":"78","line":23,"column":19,"nodeType":"72","messageId":"73","endLine":23,"endColumn":30},"no-unused-vars","'ROLES' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'check' is assigned a value but never used.","'toggleCheck' is assigned a value but never used."]